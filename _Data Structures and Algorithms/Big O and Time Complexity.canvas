{
	"nodes":[
		{"id":"5f28b43e98363a2c","type":"text","text":"## Constant Time O(1)\n\n```js\n// Linear Time O(1)\n\nfunction accessElement(array, index) {\n\n\treturn array[index];\n\n}\n```","x":-2209,"y":-516,"width":440,"height":320},
		{"id":"2090333b6b9c3c32","type":"text","text":"## Logarithmic Time O(log n)\n\n```js\n// O(log n) - Logarithmic Time\n\nfunction binarySearch(array, target) {\n\nlet left = 0;\n\nlet right = array.length - 1;\n\nwhile (left <= right) {\n\n\tlet mid = Math.floor((left + right) / 2);\n\n\tif (array[mid] === target) {\n\t\n\t\treturn mid; // Found the target\n\t\n\t} else if (array[mid] < target) {\n\t\n\t\tleft = mid + 1; \n\t\t// Continue searching in the right half\n\t\n\t} else {\n\t\n\t\tright = mid - 1; \n\t\t// Continue searching in the left half\n\t\n\t}\n\n }\n\n\treturn -1; // Target not found\n\n}\n\n```","x":-2369,"y":-136,"width":600,"height":800},
		{"id":"7c33e9d0b0bce82e","type":"text","text":"## Linearithmic Time O(n log n)\n```js\n// O(n log n) - Linearithmic Time\n\nfunction mergeSort(array) {\n\n\tif (array.length <= 1) {\n\t\n\t\treturn array;\n\t\n\t}\n\t\n\tconst mid = Math.floor(array.length / 2);\n\t\n\tconst left = mergeSort(array.slice(0, mid));\n\t\n\tconst right = mergeSort(array.slice(mid));\n\t\n\treturn merge(left, right);\n\n}\n\nfunction merge(left, right) {\n\n\tlet result = [];\n\t\n\tlet leftIndex = 0;\n\t\n\tlet rightIndex = 0;\n\t\n\twhile (leftIndex < left.length && rightIndex < right.length) {\n\t\n\t\tif (left[leftIndex] < right[rightIndex]) {\n\t\t\n\t\t\tresult.push(left[leftIndex]);\n\t\t\n\t\t\tleftIndex++;\n\t\t\n\t\t} else {\n\t\t\n\t\t\tresult.push(right[rightIndex]);\n\t\t\n\t\t\trightIndex++;\n\t\t\n\t\t}\n\t\n\t}\n\n\treturn result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\n\n}\n```","x":-1171,"y":-153,"width":680,"height":1110},
		{"id":"45d8f0a238bf5512","type":"text","text":"## Quadratic Time O(n^2)\n```js\n// O(n^2) - Quadratic Time\nfunction bubbleSort(array) {\n\t\n\tconst n = array.length;\n\n\tfor (let i = 0; i < n - 1; i++) {\n\t\n\t\tfor (let j = 0; j < n - i - 1; j++) {\n\t\t\n\t\t\tif (array[j] > array[j + 1]) {\n\t\t\t\n\t\t\t\t// Swap array[j] and array[j+1]\n\t\t\t\t\n\t\t\t\tlet temp = array[j];\n\t\t\t\t\n\t\t\t\tarray[j] = array[j + 1];\n\t\t\t\t\n\t\t\t\tarray[j + 1] = temp;\n\t\t\t\n\t\t\t}\n\t\t\n\t\t}\n\t\t\n\t}\n\t\n\treturn array;\n\n}\n\n\n\n\n\n\n\n\n```","x":-429,"y":-153,"width":537,"height":660},
		{"id":"f9e9de6d783faafd","type":"text","text":"## Linear Time O(n)\n```js\n// O(n) - Linear Time\n\nfunction findMax(array) {\n\n\tlet max = array[0];\n\t\n\tfor (let i = 1; i < array.length; i++) {\n\t\n\t\tif (array[i] > max) {\n\t\t\n\t\t\tmax = array[i];\n\t\t\n\t\t}\n\t\n\t}\n\t\n\treturn max;\n\n}\n\n```","x":-1729,"y":-153,"width":516,"height":510},
		{"id":"852a1751ae589c40","type":"text","text":"## Exponential Time O(2^n)\n```js\n// O(n^2) - Exponential Time\n\nfunction fibonacci(n) {\n\n\tif (n <= 1) {\n\t\n\t\treturn n;\n\t\n\t}\n\t\n\treturn fibonacci(n - 1) + fibonacci(n - 2);\n\n}\n```","x":211,"y":-196,"width":520,"height":440},
		{"id":"ed8875330cdfff41","type":"text","text":"## Factorial Time (n!)\n```js\n// O(n!) - Factorial Time\nfunction permute(nums) {\n\nlet result = [];\n\npermuteHelper(nums, 0, result);\n\nreturn result;\n\n}\n\n  \n\nfunction permuteHelper(nums, index, result) {\n\n\tif (index === nums.length) {\n\t\n\t\tresult.push(nums.slice()); \n\t\t// Add a copy of the current permutation\n\t\t\n\t\treturn;\n\t\t\n\t}\n\n\tfor (let i = index; i < nums.length; i++) {\n\t\n\t\tswap(nums, index, i);\n\t\t\n\t\tpermuteHelper(nums, index + 1, result);\n\t\t\n\t\tswap(nums, index, i); // Backtrack\n\t\n\t}\n\n}\n\n  \n\nfunction swap(nums, i, j) {\n\n\tlet temp = nums[i];\n\t\n\tnums[i] = nums[j];\n\t\n\tnums[j] = temp;\n\n}\n```","x":731,"y":-921,"width":651,"height":1098},
		{"id":"9f37b7af809403c4","type":"text","text":"## Full BIG O Algorithm Examples (Scroll Down)\n```js\n// Linear Time O(1)\n\nfunction accessElement(array, index) {\n\nreturn array[index];\n\n}\n\n  \n\n// O(log n) - Logarithmic Time\n\nfunction binarySearch(array, target) {\n\nlet left = 0;\n\nlet right = array.length - 1;\n\nwhile (left <= right) {\n\nlet mid = Math.floor((left + right) / 2);\n\nif (array[mid] === target) {\n\nreturn mid; // Found the target\n\n} else if (array[mid] < target) {\n\nleft = mid + 1; // Continue searching in the right half\n\n} else {\n\nright = mid - 1; // Continue searching in the left half\n\n}\n\n}\n\nreturn -1; // Target not found\n\n}\n\n// O(n) - Linear Time\n\nfunction findMax(array) {\n\nlet max = array[0];\n\nfor (let i = 1; i < array.length; i++) {\n\nif (array[i] > max) {\n\nmax = array[i];\n\n}\n\n}\n\nreturn max;\n\n}\n\n// O(n log n) - Linearithmic Time\n\nfunction mergeSort(array) {\n\nif (array.length <= 1) {\n\nreturn array;\n\n}\n\nconst mid = Math.floor(array.length / 2);\n\nconst left = mergeSort(array.slice(0, mid));\n\nconst right = mergeSort(array.slice(mid));\n\nreturn merge(left, right);\n\n}\n\n  \n\nfunction merge(left, right) {\n\nlet result = [];\n\nlet leftIndex = 0;\n\nlet rightIndex = 0;\n\nwhile (leftIndex < left.length && rightIndex < right.length) {\n\nif (left[leftIndex] < right[rightIndex]) {\n\nresult.push(left[leftIndex]);\n\nleftIndex++;\n\n} else {\n\nresult.push(right[rightIndex]);\n\nrightIndex++;\n\n}\n\n}\n\nreturn result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\n\n}\n\n// O(n^2) - Quadratic Time\n\nfunction bubbleSort(array) {\n\nconst n = array.length;\n\nfor (let i = 0; i < n - 1; i++) {\n\nfor (let j = 0; j < n - i - 1; j++) {\n\nif (array[j] > array[j + 1]) {\n\n// Swap array[j] and array[j+1]\n\nlet temp = array[j];\n\narray[j] = array[j + 1];\n\narray[j + 1] = temp;\n\n}\n\n}\n\n}\n\nreturn array;\n\n}\n\n// O(n^2) - Exponential Time\n\nfunction fibonacci(n) {\n\nif (n <= 1) {\n\nreturn n;\n\n}\n\nreturn fibonacci(n - 1) + fibonacci(n - 2);\n\n}\n\n// O(n!) - Factorial Time\n\nfunction permute(nums) {\n\nlet result = [];\n\npermuteHelper(nums, 0, result);\n\nreturn result;\n\n}\n\n```","x":1511,"y":-921,"width":859,"height":1330},
		{"id":"9c22f35ea1b7bf47","type":"file","file":"1_Images/Big O Time Complexity Chart.png","x":-1605,"y":-956,"width":2228,"height":517}
	],
	"edges":[
		{"id":"2121f95d34e22514","fromNode":"5f28b43e98363a2c","fromSide":"right","toNode":"2090333b6b9c3c32","toSide":"left"},
		{"id":"87e391b4eec197b2","fromNode":"9c22f35ea1b7bf47","fromSide":"left","toNode":"5f28b43e98363a2c","toSide":"top"},
		{"id":"9b057c47c1832ec7","fromNode":"2090333b6b9c3c32","fromSide":"right","toNode":"f9e9de6d783faafd","toSide":"left"},
		{"id":"dccfc1a170d0f64a","fromNode":"7c33e9d0b0bce82e","fromSide":"right","toNode":"45d8f0a238bf5512","toSide":"left"},
		{"id":"f1e8b81ce1262a10","fromNode":"f9e9de6d783faafd","fromSide":"right","toNode":"7c33e9d0b0bce82e","toSide":"left"},
		{"id":"2a54f28f5204894e","fromNode":"45d8f0a238bf5512","fromSide":"right","toNode":"852a1751ae589c40","toSide":"left"},
		{"id":"1e47b56613c5f8d0","fromNode":"852a1751ae589c40","fromSide":"right","toNode":"ed8875330cdfff41","toSide":"left"},
		{"id":"2020ccf0f866cb27","fromNode":"9c22f35ea1b7bf47","fromSide":"right","toNode":"9f37b7af809403c4","toSide":"top"}
	]
}