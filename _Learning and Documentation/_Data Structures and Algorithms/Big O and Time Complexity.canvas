{
	"nodes":[
		{"id":"852a1751ae589c40","type":"text","text":"## Exponential Time O(2^n)\n```js\n// Exponential Time O(2^n)\nfunction fibonacci(n) {\n  if (n <= 1) {\n      return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```","x":418,"y":-103,"width":580,"height":440},
		{"id":"45d8f0a238bf5512","type":"text","text":"## Quadratic Time O(n^2)\n```js\n// Quadratic Time O(n^2)\nfunction bubbleSort(array) {\n  const n = array.length;\n  for (let i = 0; i < n - 1; i++) {\n      for (let j = 0; j < n - i - 1; j++) {\n          if (array[j] > array[j + 1]) {\n              // Swap array[j] and array[j+1]\n              let temp = array[j];\n              array[j] = array[j + 1];\n              array[j + 1] = temp;\n          }\n      }\n  }\n  return array;\n}\n\n```","x":-311,"y":-136,"width":669,"height":513},
		{"id":"7c33e9d0b0bce82e","type":"text","text":"## Linearithmic Time O(n log n)\n```js\n// Linearithmic Time O(n log n)\nfunction mergeSort(array) {\n  if (array.length <= 1) {\n      return array;\n  }\n  const mid = Math.floor(array.length / 2);\n  const left = mergeSort(array.slice(0, mid));\n  const right = mergeSort(array.slice(mid));\n  return merge(left, right);\n}\n\nfunction merge(left, right) {\n  let result = [];\n  let leftIndex = 0;\n  let rightIndex = 0;\n  while (leftIndex < left.length && rightIndex < right.length) {\n      if (left[leftIndex] < right[rightIndex]) {\n          result.push(left[leftIndex]);\n          leftIndex++;\n      } else {\n          result.push(right[rightIndex]);\n          rightIndex++;\n      }\n  }\n  return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\n}\n```","x":-1053,"y":-136,"width":680,"height":853},
		{"id":"9c22f35ea1b7bf47","type":"file","file":"1_Images/Big O Time Complexity Chart.png","x":-1760,"y":-980,"width":3086,"height":716},
		{"id":"de33b9407efbdcfe","type":"text","text":"# Big O Notation Breakdown","x":-2423,"y":-1040,"width":491,"height":120},
		{"id":"5f28b43e98363a2c","type":"text","text":"## Constant Time O(1)\n\n```js\n// Constant Time O(1)\nfunction accessElement(array, index) {\n  return array[index];\n}\n```","x":-2372,"y":-544,"width":440,"height":320},
		{"id":"2090333b6b9c3c32","type":"text","text":"## Logarithmic Time O(log n)\n\n```js\n// Logarithmic Time O(log n)\nfunction binarySearch(array, target) {\n  let left = 0;\n  let right = array.length - 1;\n  \n  while (left <= right) {\n      let mid = Math.floor((left + right) / 2);\n      if (array[mid] === target) {\n          return mid; // Found the target\n      } else if (array[mid] < target) {\n          left = mid + 1; // Continue searching in the right half\n      } else {\n          right = mid - 1; // Continue searching in the left half\n      }\n  }\n  \n  return -1; // Target not found\n}\n\n```","x":-2423,"y":-83,"width":600,"height":800},
		{"id":"f9e9de6d783faafd","type":"text","text":"## Linear Time O(n)\n```js\n// Linear Time O(n)\nfunction findMax(array) {\n  let max = array[0];\n  for (let i = 1; i < array.length; i++) {\n      if (array[i] > max) {\n          max = array[i];\n      }\n  }\n  return max;\n}\n\n```","x":-1720,"y":-133,"width":549,"height":510},
		{"id":"ed8875330cdfff41","type":"text","text":"## Factorial Time O(n!)\n```js\n// Factorial Time O(n!)\nfunction permute(nums) {\n  let result = [];\n  permuteHelper(nums, 0, result);\n  return result;\n}\n\nfunction permuteHelper(nums, index, result) {\n  if (index === nums.length) {\n      result.push(nums.slice()); // Add a copy of the current permutation\n      return;\n  }\n  for (let i = index; i < nums.length; i++) {\n      swap(nums, index, i);\n      permuteHelper(nums, index + 1, result);\n      swap(nums, index, i); // Backtrack\n  }\n}\n\nfunction swap(nums, i, j) {\n  let temp = nums[i];\n  nums[i] = nums[j];\n  nums[j] = temp;\n}\n\n```","x":1120,"y":-172,"width":651,"height":1098},
		{"id":"79eacc392c28c15f","type":"text","text":"<body style=\"margin: 0; overflow: hidden;\"> \n<iframe src=\"https://jstats.medium.com/a-complete-beginners-guide-to-big-o-notation-4ac58ccf9d87\" style=\"width: 100%; height: 100vh; border: none;\"></iframe> </body>","x":-1166,"y":880,"width":1587,"height":1049},
		{"id":"de5036977cd307ea","type":"text","text":"**Additional Resource**","x":-1560,"y":830,"width":237,"height":70},
		{"id":"9f67c202319bb12d","type":"text","text":"Related: #bigo #time_compexity #insightful \n[[LeetCode Canvas.canvas|LeetCode Canvas]]\n[[DSA Overview]]\n","x":-2480,"y":900,"width":657,"height":180}
	],
	"edges":[
		{"id":"2121f95d34e22514","fromNode":"5f28b43e98363a2c","fromSide":"right","toNode":"2090333b6b9c3c32","toSide":"left"},
		{"id":"87e391b4eec197b2","fromNode":"9c22f35ea1b7bf47","fromSide":"left","toNode":"5f28b43e98363a2c","toSide":"top"},
		{"id":"9b057c47c1832ec7","fromNode":"2090333b6b9c3c32","fromSide":"right","toNode":"f9e9de6d783faafd","toSide":"left"},
		{"id":"dccfc1a170d0f64a","fromNode":"7c33e9d0b0bce82e","fromSide":"right","toNode":"45d8f0a238bf5512","toSide":"left"},
		{"id":"f1e8b81ce1262a10","fromNode":"f9e9de6d783faafd","fromSide":"right","toNode":"7c33e9d0b0bce82e","toSide":"left"},
		{"id":"2a54f28f5204894e","fromNode":"45d8f0a238bf5512","fromSide":"right","toNode":"852a1751ae589c40","toSide":"left"},
		{"id":"1e47b56613c5f8d0","fromNode":"852a1751ae589c40","fromSide":"right","toNode":"ed8875330cdfff41","toSide":"left"},
		{"id":"21fcbf4136960b7a","fromNode":"de33b9407efbdcfe","fromSide":"bottom","toNode":"9c22f35ea1b7bf47","toSide":"left"},
		{"id":"71b211bd3fa768a5","fromNode":"de5036977cd307ea","fromSide":"right","toNode":"79eacc392c28c15f","toSide":"left"},
		{"id":"658855a76c9ef91f","fromNode":"de5036977cd307ea","fromSide":"left","toNode":"9f67c202319bb12d","toSide":"right"},
		{"id":"f9668233db9c848e","fromNode":"de33b9407efbdcfe","fromSide":"left","toNode":"9f67c202319bb12d","toSide":"left"}
	]
}