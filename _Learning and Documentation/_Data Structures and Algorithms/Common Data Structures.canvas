{
	"nodes":[
		{"id":"e74de9ca70537aad","type":"text","text":"**Description**\n+ Stacks are a last-in, first-out (LIFO) data structure where elements are inserted and removed from the same end, known as the top.\n\n**Use Case**\n+ Commonly used for *function call management*, *expression evaluation*, and *backtracking algorithms*.\n\n**Exceptions**\n+ Limited access to elements; only the top element is accessible.\n\n**Considerations**\n+ Stack operations (push, pop) have constant-time complexity, making stacks efficient for managing *recursive function calls* and maintaining execution context.","x":495,"y":-1450,"width":580,"height":587},
		{"id":"8aa1c7b55783a85c","type":"text","text":"## 📊 Stacks","x":645,"y":-1609,"width":280,"height":59},
		{"id":"c579499b40642fbc","type":"text","text":"**Description**\n+  Queues are a first-in, first-out (FIFO) data structure where elements are inserted at the rear and removed from the front.\n\n**Use Case**\n+ Suitable for implementing *breadth-first search (BFS)*, task scheduling, and handling requests in networking and operating systems.\n\n**Exceptions**\n+ Limited access to elements; only the front and rear elements are accessible.\n\n**Considerations**\n+ Queue operations (enqueue, dequeue) have constant-*O(1) time complexity*, making queues efficient for managing tasks in a sequential manner.","x":1205,"y":-1450,"width":580,"height":587},
		{"id":"b6716a15f435986b","type":"text","text":"## 🔁 Queues","x":1355,"y":-1575,"width":280,"height":50},
		{"id":"47bc251ca65d9248","type":"text","text":"**Description**\n+ Linked lists consist of nodes where each node points to the next node in the sequence.\n\n**Use Case**\n+ Suitable for *dynamic data structures* where frequent insertions and deletions are required, especially at arbitrary positions\n\n**Exceptions**\n+ Requires extra memory for storing pointers, and traversal can be slower compared to arrays due to lack of random access.\n\n**Considerations**\n+ Linked lists can efficiently insert and delete elements at the beginning and end, but accessing elements at arbitrary positions requires traversing the list, which can be slower.","x":-165,"y":-1476,"width":560,"height":587},
		{"id":"d7f53b130de30e75","type":"text","text":"## 📑 Linked Lists","x":10,"y":-1620,"width":280,"height":50},
		{"id":"75d279810a26cf10","type":"text","text":"*Use in dynamic structures that require frequent insertions and deletions*\n+ **When creating a linked list**: \"Head is null at the start.\"\n+ **When reversing a linked list iteratively**: \"Previous points to null at the start of reversal.\"\n+ **Handle edge cases** such as empty lists, single-node lists\n+ **Basic Operations**: insertion, deletion, and traversal","x":-120,"y":-835,"width":640,"height":295},
		{"id":"152ba388da510f88","type":"text","text":"**Description**\n+ Arrays are a contiguous collection of elements stored in memory, accessible by index.\n\n**Use Case**\n+ Ideal for storing *fixed-size* element sequences where random access and constant-time O(1) access are required.\n\n**Exceptions**\n+ Arrays are fixed size--> can't be dynamically resized without reallocation (*i.e allocating a new block of memory and copying the existing elements to the new location*)\n\n**Considerations**\n+ Accessing elements by index is efficient, but insertion and deletion operations can be expensive, especially in the middle of the array.","x":-750,"y":-1490,"width":540,"height":615},
		{"id":"cf1304f761a9c800","type":"text","text":"## 🟦🟩🟨 Arrays","x":-640,"y":-1620,"width":320,"height":50},
		{"id":"d1ff603a9131850d","type":"text","text":"*Use for fixed-size sequences*\n+ **Accessing Arrays**:  Access elements by index (index count starts from 0--> Array.length-1)\n+ **Accessing Matrices**: (Matrix RxCol) Matrix.length gives the number of rows, Matrix[0].length gives the number of columns. matrixSize = Matrix.length * Matrix[0].length\n+ **Check Boundary conditions**: when accessing elements, such as checking for out-of-bounds indices.","x":-800,"y":-835,"width":640,"height":295},
		{"id":"3edef36c2edb885d","type":"text","text":"## 🌳 Common Data Structures ","x":-1195,"y":-1640,"width":445,"height":90},
		{"id":"0965d319467dd595","type":"text","text":"## 💡 Shorthand For Interviews / Coding","x":-1155,"y":-835,"width":280,"height":155},
		{"id":"082acc7e8a49882c","type":"text","text":"**Description**\n+ Trees are hierarchical data structures consisting of nodes connected by edges, with a single root node and zero or more child nodes.\n\n**Use Case**\n+ Used for representing hierarchical data such as file systems, organization structures, and abstract syntax trees (ASTs).\n\n**Exceptions**\n+ Unbalanced trees can lead to poor performance, with operations taking linear time in the worst case.\n\n**Considerations**\n+ Various types of trees exist, including binary trees, *binary search trees (BSTs)*, *AVL trees*, and *red-black trees*, each with specific properties and use cases.","x":1880,"y":-1445,"width":580,"height":587},
		{"id":"902f4f4d85de03da","type":"text","text":"## 🌳 Trees ","x":2030,"y":-1575,"width":280,"height":50},
		{"id":"159288924316b323","type":"text","text":"*Use for FIFO (First In, First Out) operations*\n+ **When creating a linked list**: \"Head is null at the start.\"\n+ **Basic Operations**: enqueue and dequeue.\n+ Helpful for handling tasks in the order they are received.","x":1273,"y":-835,"width":640,"height":295},
		{"id":"cdb832f3eecb403e","type":"text","text":"**Description**\n+ Graphs consist of vertices (nodes) connected by edges, representing relationships between entities.\n\n**Use Case**\n+ Graphs are versatile data structures used in social networks, road networks, network routing, and recommendation systems.\n\n**Exceptions**\n+ Graph traversal algorithms can be complex and have varying time complexities depending on the structure of the graph.\n\n**Considerations**\n+ Graphs can be directed or undirected and may contain cycles or be acyclic. Graph algorithms include *depth-first search (DFS)*, *breadth-first search (BFS)*, and shortest path algorithms like *Dijkstra's algorithm and Bellman-Ford algorithm.","x":2555,"y":-1474,"width":580,"height":620},
		{"id":"3aa5f8c46b8fa298","type":"text","text":"## 📈 Graphs","x":2705,"y":-1579,"width":280,"height":50},
		{"id":"ecdb270c17b7faaf","type":"text","text":"```py\n# Queues\nfrom collections import deque\n\n# Creating a queue\nqueue = deque()\n\n# Enqueuing elements into the queue\nqueue.append(1)\nqueue.append(2)\nqueue.append(3)\n\n# Dequeuing elements from the queue\nwhile queue:\n    print(queue.popleft(), end=' ')\n\n```","x":1297,"y":945,"width":574,"height":501},
		{"id":"17e4428196f48b7f","type":"text","text":"```py\n# Trees\nclass TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n# Creating a binary tree\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(3)\n\n# Traversing the tree (preorder traversal)\ndef preorder_traversal(node):\n    if node:\n        print(node.data, end=' ')\n        preorder_traversal(node.left)\n        preorder_traversal(node.right)\n\npreorder_traversal(root)\n```","x":1968,"y":945,"width":574,"height":501},
		{"id":"59e0408dff36913e","type":"text","text":"```js\n// Queues\n// Using array as a queue\nlet queue = [];\n\n// Enqueuing elements into the queue\nqueue.push(1);\nqueue.push(2);\nqueue.push(3);\n\n// Dequeuing elements from the queue\nwhile (queue.length > 0) {\n    console.log(queue.shift());\n}\n\n```","x":1297,"y":1565,"width":574,"height":501},
		{"id":"9ca594fa0a3e2831","type":"text","text":"```ts\n// Queues\nimport { Queue } from 'queue-typescript';\n\n// Creating a queue\nlet queue: Queue<number> = new Queue<number>();\n\n// Enqueuing elements into the queue\nqueue.enqueue(1);\nqueue.enqueue(2);\nqueue.enqueue(3);\n\n// Dequeuing elements from the queue\nwhile (!queue.isEmpty()) {\n    console.log(queue.dequeue());\n}\n\n```","x":1297,"y":2185,"width":574,"height":501},
		{"id":"e227e306922215ca","type":"text","text":"```ts\n// Trees\nclass TreeNode {\n  data: number;\n  left: TreeNode | null;\n  right: TreeNode | null;\n  constructor(data: number) {\n      this.data = data;\n      this.left = null;\n      this.right = null;\n  }\n}\n\n// Creating a binary tree\nlet root: TreeNode = new TreeNode(1);\nroot.left = new TreeNode(2);\nroot.right = new TreeNode(3);\n\n// Traversing the tree (preorder traversal)\nfunction preorderTraversal(node: TreeNode | null): void {\n  if (node !== null) {\n      console.log(node.data);\n      preorderTraversal(node.left);\n      preorderTraversal(node.right);\n  }\n}\n\npreorderTraversal(root);\n\n```","x":2011,"y":2185,"width":574,"height":501},
		{"id":"a15308e9f2f30d96","type":"text","text":"```js\n// Trees\nclass TreeNode {\n  constructor(data) {\n      this.data = data;\n      this.left = null;\n      this.right = null;\n  }\n}\n\n// Creating a binary tree\nlet root = new TreeNode(1);\nroot.left = new TreeNode(2);\nroot.right = new TreeNode(3);\n\n// Traversing the tree (preorder traversal)\nfunction preorderTraversal(node) {\n  if (node) {\n      console.log(node.data);\n      preorderTraversal(node.left);\n      preorderTraversal(node.right);\n  }\n}\n\npreorderTraversal(root);\n\n```","x":1968,"y":1565,"width":574,"height":501},
		{"id":"b13b66dd70200e2e","type":"text","text":"```java\n// Trees\nclass TreeNode {\n  int data;\n  TreeNode left, right;\n  TreeNode(int data) {\n      this.data = data;\n      this.left = null;\n      this.right = null;\n  }\n}\n\n// Creating a binary tree\nTreeNode root = new TreeNode(1);\nroot.left = new TreeNode(2);\nroot.right = new TreeNode(3);\n\n// Traversing the tree (preorder traversal)\nvoid preorderTraversal(TreeNode node) {\n  if (node != null) {\n      System.out.println(node.data);\n      preorderTraversal(node.left);\n      preorderTraversal(node.right);\n  }\n}\n\npreorderTraversal(root);\n```","x":2043,"y":2835,"width":574,"height":501},
		{"id":"7c492965856a3423","type":"text","text":"```java\n// Queues\nimport java.util.Queue;\nimport java.util.LinkedList;\n\n// Creating a queue\nQueue<Integer> queue = new LinkedList<>();\n\n// Enqueuing elements into the queue\nqueue.add(1);\nqueue.add(2);\nqueue.add(3);\n\n// Dequeuing elements from the queue\nwhile (!queue.isEmpty()) {\n    System.out.println(queue.remove());\n}\n```","x":1323,"y":2835,"width":574,"height":501},
		{"id":"0cc83814fa6d8cf6","type":"text","text":"```py\n# Linked Lists\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# Creating a linked list\nhead = Node(1)\nhead.next = Node(2)\nhead.next.next = Node(3)\n\n# Traversing the linked list\ntemp = head\nwhile temp:\n    print(temp.data, end=' ')\n    temp = temp.next\n\n```","x":-39,"y":945,"width":574,"height":501},
		{"id":"b05b19011a250251","type":"text","text":"```py\n# Stacks\n# Using list as a stack\nstack = []\n\n# Pushing elements into the stack\nstack.append(1)\nstack.append(2)\nstack.append(3)\n\n# Popping elements from the stack\nwhile stack:\n    print(stack.pop(), end=' ')\n\n```","x":656,"y":945,"width":574,"height":501},
		{"id":"e287f77684407d02","type":"text","text":"```js\n// Linked Lists\nclass Node {\n  constructor(data) {\n      this.data = data;\n      this.next = null;\n  }\n}\n\n// Creating a linked list\nlet head = new Node(1);\nhead.next = new Node(2);\nhead.next.next = new Node(3);\n\n// Traversing the linked list\nlet temp = head;\nwhile (temp) {\n  console.log(temp.data);\n  temp = temp.next;\n}\n```","x":-24,"y":1534,"width":574,"height":501},
		{"id":"eff346c50ac40ed0","type":"text","text":"```js\n// Stacks\n// Using array as a stack\nlet stack = [];\n\n// Pushing elements into the stack\nstack.push(1);\nstack.push(2);\nstack.push(3);\n\n// Popping elements from the stack\nwhile (stack.length > 0) {\n    console.log(stack.pop());\n}\n```","x":632,"y":1534,"width":574,"height":501},
		{"id":"7e2a0c90267384c0","type":"text","text":"```ts\n// Linked Lists\nclass Node {\n  data: number;\n  next: Node | null;\n  constructor(data: number) {\n      this.data = data;\n      this.next = null;\n  }\n}\n\n// Creating a linked list\nlet head: Node = new Node(1);\nhead.next = new Node(2);\nhead.next.next = new Node(3);\n\n// Traversing the linked list\nlet temp: Node | null = head;\nwhile (temp !== null) {\n  console.log(temp.data);\n  temp = temp.next;\n}\n```","x":-24,"y":2185,"width":574,"height":501},
		{"id":"815244045e1ac0d8","type":"text","text":"```ts\n// Stacks\n// Using array as a stack\nlet stack: number[] = [];\n\n// Pushing elements into the stack\nstack.push(1);\nstack.push(2);\nstack.push(3);\n\n// Popping elements from the stack\nwhile (stack.length > 0) {\n    console.log(stack.pop());\n}\n```","x":632,"y":2185,"width":574,"height":501},
		{"id":"ac2ac923415a27db","type":"text","text":"```java\n// Linked Lists\nclass Node {\n  int data;\n  Node next;\n  Node(int data) {\n      this.data = data;\n      this.next = null;\n  }\n}\n\n// Creating a linked list\nNode head = new Node(1);\nhead.next = new Node(2);\nhead.next.next = new Node(3);\n\n// Traversing the linked list\nNode temp = head;\nwhile (temp != null) {\n  System.out.println(temp.data);\n  temp = temp.next;\n}\n```","x":-24,"y":2835,"width":574,"height":501},
		{"id":"ae32a2b87ed0b446","type":"text","text":"```java\n// Stacks\nimport java.util.Stack;\n\n// Creating a stack\nStack<Integer> stack = new Stack<>();\n\n// Pushing elements into the stack\nstack.push(1);\nstack.push(2);\nstack.push(3);\n\n// Popping elements from the stack\nwhile (!stack.empty()) {\n    System.out.println(stack.pop());\n}\n```","x":632,"y":2835,"width":574,"height":501},
		{"id":"40fc2dec56e57f4a","type":"text","text":"## 📊 Stacks","x":752,"y":-368,"width":280,"height":59},
		{"id":"ce9bdd61b60f6c8e","type":"text","text":"```cpp\n#include <iostream>\nusing namespace std;\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nint main() {\n    // Creating a linked list\n    Node* head = new Node();\n    head->data = 1;\n    head->next = NULL;\n\n    // Traversing the linked list\n    Node* temp = head;\n    while (temp != NULL) {\n        cout << temp->data << \" \";\n        temp = temp->next;\n    }\n\n    return 0;\n}\n```","x":-77,"y":-236,"width":600,"height":501},
		{"id":"26913b162e03123c","type":"text","text":"```cpp\n#include <iostream>\n#include <stack>\nusing namespace std;\n\nint main() {\n    // Creating a stack\n    stack<int> s;\n\n    // Pushing elements into the stack\n    s.push(1);\n    s.push(2);\n    s.push(3);\n\n    // Popping elements from the stack\n    while (!s.empty()) {\n        cout << s.top() << \" \";\n        s.pop();\n    }\n\n    return 0;\n}\n```","x":592,"y":-236,"width":600,"height":501},
		{"id":"9d3f6291c8a8a1c6","type":"text","text":"```cs\n// Linked Lists\nusing System;\n\nclass Node\n{\n    public int data;\n    public Node next;\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        // Creating a linked list\n        Node head = new Node();\n        head.data = 1;\n        head.next = null;\n\n        // Traversing the linked list\n        Node temp = head;\n        while (temp != null)\n        {\n            Console.Write(temp.data + \" \");\n            temp = temp.next;\n        }\n    }\n}\n```","x":-50,"y":345,"width":600,"height":501},
		{"id":"235dffadb169ef1d","type":"text","text":"```cs\n// Stacks\nusing System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        // Creating a stack\n        Stack<int> stack = new Stack<int>();\n\n        // Pushing elements into the stack\n        stack.Push(1);\n        stack.Push(2);\n        stack.Push(3);\n\n        // Popping elements from the stack\n        while (stack.Count > 0)\n        {\n            Console.Write(stack.Pop() + \" \");\n        }\n    }\n}\n\n```","x":619,"y":345,"width":600,"height":501},
		{"id":"f9e5dbdf877049c9","type":"text","text":"```cpp\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    // Graph representation using adjacency list\n    int V = 4;\n    vector<vector<int>> adj(V);\n\n    // Adding edges to the graph\n    adj[0].push_back(1);\n    adj[1].push_back(2);\n    adj[2].push_back(3);\n    adj[3].push_back(0);\n\n    // Traversing the graph\n    for (int i = 0; i < V; i++) {\n        cout << \"Vertex \" << i << \" is connected to:\";\n        for (int j = 0; j < adj[i].size(); j++) {\n            cout << \" \" << adj[i][j];\n        }\n        cout << endl;\n    }\n\n    return 0;\n}\n\n\n```","x":2636,"y":-245,"width":600,"height":501},
		{"id":"4164f359618820f6","type":"text","text":"```cs\n// Graphs\nusing System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        // Graph representation using adjacency list\n        Dictionary<int, List<int>> adjList = new Dictionary<int, List<int>>();\n        adjList.Add(0, new List<int> { 1, 3 });\n        adjList.Add(1, new List<int> { 0, 2 });\n        adjList.Add(2, new List<int> { 1 });\n        adjList.Add(3, new List<int> { 0 });\n\n        // Traversing the graph\n        foreach (var kvp in adjList)\n        {\n            Console.Write(\"Vertex \" + kvp.Key + \" is connected to:\");\n            foreach (int neighbor in kvp.Value)\n            {\n                Console.Write(\" \" + neighbor);\n            }\n            Console.WriteLine();\n        }\n    }\n}\n\n```","x":2646,"y":345,"width":600,"height":501},
		{"id":"eac14aa1fcf28973","type":"text","text":"```py\n# Graph representation using adjacency list\ngraph = {\n    0: [1, 3],\n    1: [0, 2],\n    2: [1],\n    3: [0]\n}\n\n# Traversing the graph\nfor vertex, neighbors in graph.items():\n    print(f\"Vertex {vertex} is connected to:\", end=' ')\n    for neighbor in neighbors:\n        print(neighbor, end=' ')\n    print()\n\n```","x":2659,"y":945,"width":574,"height":501},
		{"id":"fc9340b90b23dbfb","type":"text","text":"```ts\n// Graphs\n// Graph representation using adjacency list\nlet graph: { [key: number]: number[] } = {\n  0: [1, 3],\n  1: [0, 2],\n  2: [1],\n  3: [0]\n};\n\n// Traversing the graph\nfor (let vertex in graph) {\n  let neighbors: number[] = graph[vertex];\n  let neighborString: string = neighbors.join(', ');\n  console.log(`Vertex ${vertex} is connected to: ${neighborString}`);\n}\n```","x":2659,"y":2185,"width":574,"height":501},
		{"id":"125591f650dbd382","type":"text","text":"```js\n// Graphs\n// Graph representation using adjacency list\nlet graph = {\n  0: [1, 3],\n  1: [0, 2],\n  2: [1],\n  3: [0]\n};\n\n// Traversing the graph\nfor (let vertex in graph) {\n  let neighbors = graph[vertex];\n  let neighborString = neighbors.join(', ');\n  console.log(`Vertex ${vertex} is connected to: ${neighborString}`);\n}\n\n```","x":2659,"y":1565,"width":574,"height":501},
		{"id":"39b2d43df9d69e35","type":"text","text":"```java\n// Graphs\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n// Graph representation using adjacency list\nMap<Integer, List<Integer>> graph = new HashMap<>();\ngraph.put(0, List.of(1, 3));\ngraph.put(1, List.of(0, 2));\ngraph.put(2, List.of(1));\ngraph.put(3, List.of(0));\n\n// Traversing the graph\nfor (Map.Entry<Integer, List<Integer>> entry : graph.entrySet()) {\n    System.out.print(\"Vertex \" + entry.getKey() + \" is connected to:\");\n    for (int neighbor : entry.getValue()) {\n        System.out.print(\" \" + neighbor);\n    }\n    System.out.println();\n}\n\n```","x":2743,"y":2835,"width":574,"height":501},
		{"id":"d4a44fafc10bef67","type":"text","text":"## 📈 Graphs","x":2796,"y":-359,"width":280,"height":50},
		{"id":"5784d1f69d6fcaef","type":"text","text":"```cpp\n#include <iostream>\n#include <queue>\nusing namespace std;\n\nint main() {\n    // Creating a queue\n    queue<int> q;\n\n    // Enqueuing elements into the queue\n    q.push(1);\n    q.push(2);\n    q.push(3);\n\n    // Dequeuing elements from the queue\n    while (!q.empty()) {\n        cout << q.front() << \" \";\n        q.pop();\n    }\n\n    return 0;\n}\n\n```","x":1276,"y":-245,"width":600,"height":501},
		{"id":"98cd2823336ff742","type":"text","text":"```cpp\n#include <iostream>\nusing namespace std;\n\nstruct TreeNode {\n    int data;\n    TreeNode* left;\n    TreeNode* right;\n};\n\nint main() {\n    // Creating a binary tree\n    TreeNode* root = new TreeNode();\n    root->data = 1;\n    root->left = new TreeNode();\n    root->left->data = 2;\n    root->right = new TreeNode();\n    root->right->data = 3;\n\n    // Traversing the tree (preorder traversal)\n    cout << root->data << \" \";\n    cout << root->left->data << \" \";\n    cout << root->right->data << \" \";\n\n    return 0;\n}\n\n```","x":1958,"y":-245,"width":600,"height":501},
		{"id":"c729995e833babac","type":"text","text":"```cs\n// Queues\nusing System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        // Creating a queue\n        Queue<int> queue = new Queue<int>();\n\n        // Enqueuing elements into the queue\n        queue.Enqueue(1);\n        queue.Enqueue(2);\n        queue.Enqueue(3);\n\n        // Dequeuing elements from the queue\n        while (queue.Count > 0)\n        {\n            Console.Write(queue.Dequeue() + \" \");\n        }\n    }\n}\n\n```","x":1297,"y":345,"width":600,"height":501},
		{"id":"acd76a30590e4aae","type":"text","text":"```cs\n// Trees\nusing System;\n\nclass TreeNode\n{\n    public int data;\n    public TreeNode left;\n    public TreeNode right;\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        // Creating a binary tree\n        TreeNode root = new TreeNode();\n        root.data = 1;\n        root.left = new TreeNode();\n        root.left.data = 2;\n        root.right = new TreeNode();\n        root.right.data = 3;\n\n        // Traversing the tree (preorder traversal)\n        Console.Write(root.data + \" \");\n        Console.Write(root.left.data + \" \");\n        Console.Write(root.right.data + \" \");\n    }\n}\n```","x":1968,"y":345,"width":600,"height":501},
		{"id":"e951a17259521d2d","type":"text","text":"## 🔁 Queues","x":1436,"y":-359,"width":280,"height":50},
		{"id":"fed8ee710920b9b4","type":"text","text":"## 🌳 Trees ","x":2115,"y":-359,"width":280,"height":50},
		{"id":"e1976fbcaed3204d","type":"text","text":"```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    // Declaring an array\n    int arr[5] = {1, 2, 3, 4, 5};\n\n    // Accessing elements of the array\n    for (int i = 0; i < 5; i++) {\n        cout << arr[i] << \" \";\n    }\n\n    return 0;\n}\n\n```","x":-774,"y":-236,"width":574,"height":501},
		{"id":"aa663784917c41a5","type":"text","text":"```cs\n// Arrays\nusing System;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        // Declaring an array\n        int[] arr = new int[] { 1, 2, 3, 4, 5 };\n\n        // Accessing elements of the array\n        foreach (int num in arr)\n        {\n            Console.Write(num + \" \");\n        }\n    }\n}\n```","x":-747,"y":345,"width":574,"height":501},
		{"id":"51d216dbe29e3c81","type":"text","text":"```cpp\n#include <iostream>\n\nusing namespace std;\n\n  \n\nint main() {\n\n// Declaring an array\n\nint arr[5] = {1, 2, 3, 4, 5};\n\n  \n\n// Accessing elements of the array\n\nfor (int i = 0; i < 5; i++) {\n\ncout << arr[i] << \" \";\n\n}\n\n  \n\nreturn 0;\n\n}\n\n```","x":-736,"y":1534,"width":574,"height":501},
		{"id":"91547269f7156a22","type":"text","text":"```js\n// Arrays\n// Creating an array\nlet arr = [1, 2, 3, 4, 5];\n\n// Accessing elements of the array\nfor (let i = 0; i < arr.length; i++) {\n    console.log(arr[i]);\n}\n```","x":-677,"y":1534,"width":574,"height":501},
		{"id":"10637ec97a8c2f94","type":"text","text":"```py\n# Arrays\n# Creating an array\narr = [1, 2, 3, 4, 5]\n\n# Accessing elements of the array\nfor num in arr:\n    print(num, end=' ')\n```","x":-736,"y":945,"width":574,"height":501},
		{"id":"bd37c87cfb84457a","type":"text","text":"```ts\n// Arrays\n// Creating an array\nlet arr: number[] = [1, 2, 3, 4, 5];\n\n// Accessing elements of the array\nfor (let num of arr) {\n    console.log(num);\n}\n\n```","x":-736,"y":2185,"width":574,"height":501},
		{"id":"984c280720ede226","type":"text","text":"```java\n// Arrays\n// Creating an array\nint[] arr = {1, 2, 3, 4, 5};\n\n// Accessing elements of the array\nfor (int num : arr) {\n    System.out.println(num);\n}\n\n```","x":-736,"y":2835,"width":574,"height":501},
		{"id":"18c7194efc94234d","type":"text","text":"## 📑 Linked Lists","x":63,"y":-359,"width":280,"height":50},
		{"id":"802c6517378f78a8","type":"text","text":"## 🟦🟩🟨 Arrays","x":-594,"y":-364,"width":320,"height":50},
		{"id":"14a52072eb84df76","type":"text","text":"## Common Data Structures in","x":-1200,"y":-400,"width":265,"height":90},
		{"id":"1ba259cef655cbdd","type":"text","text":"### C++","x":-1192,"y":-240,"width":250,"height":60},
		{"id":"307bf11e309e495e","type":"text","text":"### C#","x":-1185,"y":345,"width":250,"height":60},
		{"id":"f0ad74f25e4c190d","type":"text","text":"### Python","x":-1185,"y":944,"width":250,"height":60},
		{"id":"3a90225190b8a0ae","type":"text","text":"### JavaScript","x":-1185,"y":1504,"width":250,"height":60},
		{"id":"5b35e7a46eab1f04","type":"text","text":"### TypeScript","x":-1185,"y":2210,"width":250,"height":60},
		{"id":"716bbb6920ba610a","type":"text","text":"### Java","x":-1185,"y":2800,"width":250,"height":70},
		{"id":"1f9b41005a0f8a53","type":"text","text":"*Use for LIFO (Last In, First Out) operations_*\n+ **Basic Operations**: push and pop.\n- Useful for tracking state changes or backtracking in algorithms.","x":552,"y":-820,"width":640,"height":295},
		{"id":"fec18cf1409b9a7b","type":"text","text":"*Use for representing networks or relationships between entities*_\n- Know different graph representations: adjacency list, adjacency matrix.\n- Master graph traversal algorithms: BFS (Breadth-First Search), DFS (Depth-First Search).\n- Understand common graph problems such as shortest path, cycle detection, and connectivity.","x":2643,"y":-800,"width":640,"height":295},
		{"id":"7f885a5a8ba54aae","type":"text","text":"*Use for hierarchical data structures*\n- Understand different tree traversal techniques: preorder, inorder, postorder.\n- Familiarize yourself with common tree algorithms such as finding the height, diameter, or lowest common ancestor.","x":1935,"y":-800,"width":640,"height":295}
	],
	"edges":[
		{"id":"cab37a9320312dd7","fromNode":"14a52072eb84df76","fromSide":"bottom","toNode":"1ba259cef655cbdd","toSide":"top"},
		{"id":"796f9c80aca66f61","fromNode":"1ba259cef655cbdd","fromSide":"bottom","toNode":"307bf11e309e495e","toSide":"top"},
		{"id":"122128edde37389e","fromNode":"307bf11e309e495e","fromSide":"bottom","toNode":"f0ad74f25e4c190d","toSide":"top"},
		{"id":"655c5a200fe4a085","fromNode":"f0ad74f25e4c190d","fromSide":"bottom","toNode":"3a90225190b8a0ae","toSide":"top"},
		{"id":"2dc9dae8ac47245c","fromNode":"3a90225190b8a0ae","fromSide":"bottom","toNode":"5b35e7a46eab1f04","toSide":"top"},
		{"id":"26f43c5de711a087","fromNode":"5b35e7a46eab1f04","fromSide":"bottom","toNode":"716bbb6920ba610a","toSide":"top"},
		{"id":"c38cbd970a5312ab","fromNode":"1ba259cef655cbdd","fromSide":"right","toNode":"e1976fbcaed3204d","toSide":"left"},
		{"id":"2c2339ec7b5c840f","fromNode":"802c6517378f78a8","fromSide":"bottom","toNode":"e1976fbcaed3204d","toSide":"top"},
		{"id":"a471553451ee3a4d","fromNode":"18c7194efc94234d","fromSide":"bottom","toNode":"ce9bdd61b60f6c8e","toSide":"top"},
		{"id":"d9cbb87c6d991387","fromNode":"e1976fbcaed3204d","fromSide":"right","toNode":"ce9bdd61b60f6c8e","toSide":"left"},
		{"id":"64c2f83eb2886813","fromNode":"40fc2dec56e57f4a","fromSide":"bottom","toNode":"26913b162e03123c","toSide":"top"},
		{"id":"7cc955ac7639c494","fromNode":"e951a17259521d2d","fromSide":"bottom","toNode":"5784d1f69d6fcaef","toSide":"top"},
		{"id":"ed71c746899a33d6","fromNode":"fed8ee710920b9b4","fromSide":"bottom","toNode":"98cd2823336ff742","toSide":"top"},
		{"id":"3fcd756cd73d9bf7","fromNode":"d4a44fafc10bef67","fromSide":"bottom","toNode":"f9e5dbdf877049c9","toSide":"top"},
		{"id":"ba74c644a60ff70f","fromNode":"ce9bdd61b60f6c8e","fromSide":"right","toNode":"26913b162e03123c","toSide":"left"},
		{"id":"16b6e70418053a12","fromNode":"26913b162e03123c","fromSide":"right","toNode":"5784d1f69d6fcaef","toSide":"left"},
		{"id":"0889954bff3c94da","fromNode":"5784d1f69d6fcaef","fromSide":"right","toNode":"98cd2823336ff742","toSide":"left"},
		{"id":"9bf6c70433edda70","fromNode":"98cd2823336ff742","fromSide":"right","toNode":"f9e5dbdf877049c9","toSide":"left"},
		{"id":"a70624894e3b7ebe","fromNode":"152ba388da510f88","fromSide":"right","toNode":"47bc251ca65d9248","toSide":"left"},
		{"id":"3d579c4aa4760019","fromNode":"47bc251ca65d9248","fromSide":"bottom","toNode":"75d279810a26cf10","toSide":"top"},
		{"id":"ee3eee8db0e1cc04","fromNode":"0965d319467dd595","fromSide":"right","toNode":"d1ff603a9131850d","toSide":"left"},
		{"id":"b5879eb1efb47a53","fromNode":"152ba388da510f88","fromSide":"bottom","toNode":"d1ff603a9131850d","toSide":"top"},
		{"id":"691d84d9666cebf2","fromNode":"d1ff603a9131850d","fromSide":"right","toNode":"75d279810a26cf10","toSide":"left"},
		{"id":"5dc37f4d06367548","fromNode":"cf1304f761a9c800","fromSide":"bottom","toNode":"152ba388da510f88","toSide":"top"},
		{"id":"8e86b17eddb5ef38","fromNode":"d7f53b130de30e75","fromSide":"bottom","toNode":"47bc251ca65d9248","toSide":"top"},
		{"id":"8f4d49c53c051cc4","fromNode":"8aa1c7b55783a85c","fromSide":"bottom","toNode":"e74de9ca70537aad","toSide":"top"},
		{"id":"07aace7b81f952dd","fromNode":"47bc251ca65d9248","fromSide":"right","toNode":"e74de9ca70537aad","toSide":"left"},
		{"id":"5bc8c67f2b97a930","fromNode":"b6716a15f435986b","fromSide":"bottom","toNode":"c579499b40642fbc","toSide":"top"},
		{"id":"f2b1769bbae56a8f","fromNode":"e74de9ca70537aad","fromSide":"right","toNode":"c579499b40642fbc","toSide":"left"},
		{"id":"329d5a8cc8038e1e","fromNode":"3edef36c2edb885d","fromSide":"bottom","toNode":"152ba388da510f88","toSide":"left"},
		{"id":"eeb0b7e42b05ad6d","fromNode":"902f4f4d85de03da","fromSide":"bottom","toNode":"082acc7e8a49882c","toSide":"top"},
		{"id":"90a14c5b54d66fcf","fromNode":"3aa5f8c46b8fa298","fromSide":"bottom","toNode":"cdb832f3eecb403e","toSide":"top"},
		{"id":"1c2e00eb938521bc","fromNode":"aa663784917c41a5","fromSide":"right","toNode":"9d3f6291c8a8a1c6","toSide":"left"},
		{"id":"f274d8aaebef13ce","fromNode":"9d3f6291c8a8a1c6","fromSide":"right","toNode":"235dffadb169ef1d","toSide":"left"},
		{"id":"260d8bb381843578","fromNode":"307bf11e309e495e","fromSide":"right","toNode":"aa663784917c41a5","toSide":"left"},
		{"id":"72df6f904b447000","fromNode":"3a90225190b8a0ae","fromSide":"right","toNode":"51d216dbe29e3c81","toSide":"left"},
		{"id":"ac775e018928fb33","fromNode":"c579499b40642fbc","fromSide":"right","toNode":"082acc7e8a49882c","toSide":"left"},
		{"id":"defdf055f334a172","fromNode":"082acc7e8a49882c","fromSide":"right","toNode":"cdb832f3eecb403e","toSide":"left"},
		{"id":"833c00d45e087dd5","fromNode":"c729995e833babac","fromSide":"right","toNode":"acd76a30590e4aae","toSide":"left"},
		{"id":"8223ae13a45e9c17","fromNode":"acd76a30590e4aae","fromSide":"right","toNode":"4164f359618820f6","toSide":"left"},
		{"id":"1fbb4791d3121a59","fromNode":"235dffadb169ef1d","fromSide":"right","toNode":"c729995e833babac","toSide":"left"},
		{"id":"a16d66c7d1ecc077","fromNode":"10637ec97a8c2f94","fromSide":"right","toNode":"0cc83814fa6d8cf6","toSide":"left"},
		{"id":"622f477e3d274831","fromNode":"0cc83814fa6d8cf6","fromSide":"right","toNode":"b05b19011a250251","toSide":"left"},
		{"id":"3dfb761bbb2662a6","fromNode":"b05b19011a250251","fromSide":"right","toNode":"ecdb270c17b7faaf","toSide":"left"},
		{"id":"51c8cdd1876c1692","fromNode":"ecdb270c17b7faaf","fromSide":"right","toNode":"17e4428196f48b7f","toSide":"left"},
		{"id":"dd2e4e0cf200c02a","fromNode":"17e4428196f48b7f","fromSide":"right","toNode":"eac14aa1fcf28973","toSide":"left"},
		{"id":"21793d8c91ea0cc9","fromNode":"91547269f7156a22","fromSide":"right","toNode":"e287f77684407d02","toSide":"left"},
		{"id":"23e059e654829c7c","fromNode":"5b35e7a46eab1f04","fromSide":"right","toNode":"bd37c87cfb84457a","toSide":"left"},
		{"id":"9d4d7e82a9096fea","fromNode":"716bbb6920ba610a","fromSide":"right","toNode":"984c280720ede226","toSide":"left"},
		{"id":"25754ed5e98c3c64","fromNode":"f0ad74f25e4c190d","fromSide":"right","toNode":"10637ec97a8c2f94","toSide":"left"},
		{"id":"73152d24074683ff","fromNode":"e287f77684407d02","fromSide":"right","toNode":"eff346c50ac40ed0","toSide":"left"},
		{"id":"858c4c3ebb774c10","fromNode":"eff346c50ac40ed0","fromSide":"right","toNode":"59e0408dff36913e","toSide":"left"},
		{"id":"370ecf4d6d2ad745","fromNode":"59e0408dff36913e","fromSide":"right","toNode":"a15308e9f2f30d96","toSide":"left"},
		{"id":"b45df82f4e3ff544","fromNode":"a15308e9f2f30d96","fromSide":"right","toNode":"125591f650dbd382","toSide":"left"},
		{"id":"981e9753e820b737","fromNode":"bd37c87cfb84457a","fromSide":"right","toNode":"7e2a0c90267384c0","toSide":"left"},
		{"id":"f0a45043a6f99c93","fromNode":"7e2a0c90267384c0","fromSide":"right","toNode":"815244045e1ac0d8","toSide":"left"},
		{"id":"b88d331e00e8058b","fromNode":"815244045e1ac0d8","fromSide":"right","toNode":"9ca594fa0a3e2831","toSide":"left"},
		{"id":"ef7c49e234710620","fromNode":"9ca594fa0a3e2831","fromSide":"right","toNode":"e227e306922215ca","toSide":"left"},
		{"id":"e276165c6f3ccfb5","fromNode":"e227e306922215ca","fromSide":"right","toNode":"fc9340b90b23dbfb","toSide":"left"},
		{"id":"e3ba42d8d2ca1725","fromNode":"7c492965856a3423","fromSide":"right","toNode":"b13b66dd70200e2e","toSide":"left"},
		{"id":"d36265fc1539c0f6","fromNode":"b13b66dd70200e2e","fromSide":"right","toNode":"39b2d43df9d69e35","toSide":"left"},
		{"id":"a704971ff582c2bc","fromNode":"ae32a2b87ed0b446","fromSide":"right","toNode":"7c492965856a3423","toSide":"left"},
		{"id":"bccec0018593213c","fromNode":"ac2ac923415a27db","fromSide":"right","toNode":"ae32a2b87ed0b446","toSide":"left"},
		{"id":"6a47c8284830523b","fromNode":"984c280720ede226","fromSide":"right","toNode":"ac2ac923415a27db","toSide":"left"},
		{"id":"36d4c1669d385cfb","fromNode":"e74de9ca70537aad","fromSide":"bottom","toNode":"1f9b41005a0f8a53","toSide":"top"},
		{"id":"363f33c1d2e67918","fromNode":"082acc7e8a49882c","fromSide":"bottom","toNode":"7f885a5a8ba54aae","toSide":"top"},
		{"id":"a4ae6ece7c993ecd","fromNode":"cdb832f3eecb403e","fromSide":"bottom","toNode":"fec18cf1409b9a7b","toSide":"top"},
		{"id":"730ac1ca6dae32b4","fromNode":"c579499b40642fbc","fromSide":"bottom","toNode":"159288924316b323","toSide":"top"}
	]
}