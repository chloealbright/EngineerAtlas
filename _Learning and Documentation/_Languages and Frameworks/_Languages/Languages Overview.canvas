{
	"nodes":[
		{"id":"e832d1efae759362","type":"text","text":"**C#**\n\n- **Pros:**\n    \n    - Elegant syntax.\n    - Extensive framework support (.NET).\n    - Garbage collection.\n    - Strong typing.\n- **Cons:**\n    \n    - Platform dependency (historically).\n    - Learning curve for beginners.\n- **Use Cases:**\n    \n    - Desktop applications (Windows Forms, WPF).\n    - Web development (ASP.NET).\n    - Game development (Unity).\n- **Design Considerations:**\n    \n    - Utilize .NET framework features.\n    - Leverage object-oriented principles.\n","x":-120,"y":-820,"width":598,"height":1050},
		{"id":"13a7ad36d91bd1ec","type":"text","text":"**Python**\n\n- **Pros:**\n    \n    - Readability and simplicity.\n    - Extensive standard library.\n    - Broad community support.\n    - Versatility.\n- **Cons:**\n    \n    - Global Interpreter Lock (GIL) can limit concurrency.\n    - Slower execution speed compared to compiled languages.\n- **Use Cases:**\n    \n    - Web development (Django, Flask).\n    - Data science and machine learning.\n    - Automation and scripting.\n- **Design Considerations:**\n    \n    - Prioritize code readability.\n    - Leverage Python's rich ecosystem.","x":541,"y":-820,"width":728,"height":1050},
		{"id":"2869f73d042eda3c","type":"text","text":"**C++**\n\n- **Pros:**\n    \n    - High performance and efficiency.\n    - Extensive standard library.\n    - Low-level memory manipulation.\n    - Widely used in game development and system programming.\n- **Cons:**\n    \n    - Steeper learning curve.\n    - Manual memory management can lead to errors.\n    - Verbosity in syntax.\n- **Use Cases:**\n    \n    - Game development.\n    - System-level programming.\n    - Performance-critical applications.\n- **Design Considerations:**\n    \n    - Focus on efficiency.\n    - Memory management requires careful attention.\n    - Suitable for resource-intensive tasks.","x":-900,"y":-820,"width":729,"height":986},
		{"id":"a91f3a91fe5ca2c4","type":"text","text":"## Languages Overview\n","x":-1340,"y":-920,"width":339,"height":140},
		{"id":"7ced5e878274c243","type":"text","text":"**Structured Query Language (SQL)**\n\n- **Pros:**\n    \n    - **Simplicity and Readability:**\n        \n        - Intuitive syntax for querying databases.\n        - Easy to read and write, facilitating quick data retrieval.\n    - **Data Integrity:**\n        \n        - Enforces data integrity through constraints (e.g., primary keys, foreign keys).\n        - Supports transactions for atomicity and consistency.\n    - **Standardization:**\n        \n        - Standard language for relational database management systems (RDBMS).\n        - Wide industry adoption and support.\n    - **Optimization:**\n        \n        - Optimized for set-based operations.\n        - Efficient for complex queries and aggregations.\n- **Cons:**\n    \n    - **Limited Procedural Capabilities:**\n        \n        - Primarily declarative, lacks extensive procedural programming features.\n        - May require coupling with a procedural language.\n    - **Scalability Challenges:**\n        \n        - Scaling vertically (upgrading hardware) may have limitations.\n        - Some NoSQL databases offer better horizontal scaling.\n    - **Vendor-Specific Syntax:**\n        \n        - SQL implementations vary between database vendors.\n        - Portability challenges when migrating between systems.\n- **Use Cases:**\n    \n    - **Data Retrieval:**\n        \n        - Querying and retrieving data from relational databases.\n        - Filtering, sorting, and aggregating data.\n    - **Data Modification:**\n        \n        - Inserting, updating, and deleting records.\n        - Maintaining data consistency and integrity.\n    - **Database Administration:**\n        \n        - Creating and modifying database schema.\n        - Managing user permissions and access.\n- **Design Considerations:**\n    \n    - **Normalization:**\n        \n        - Design databases in normalized forms to reduce redundancy.\n        - Optimize for data integrity.\n    - **Indexing:**\n        \n        - Strategically use indexes to enhance query performance.\n        - Consider trade-offs between read and write operations.\n    - **Security Measures:**\n        \n        - Implement proper access controls and permissions.\n        - Avoid SQL injection by using parameterized queries.\n    - **Performance Optimization:**\n        \n        - Optimize queries for performance.\n        - Monitor and analyze query execution plans.","x":541,"y":285,"width":840,"height":2695},
		{"id":"ea58f78beddb6bf5","type":"text","text":"**TypeScript**\n\n- **Pros:**\n    \n    - Static typing for enhanced code reliability.\n    - Improved tooling and autocompletion.\n    - Compatibility with existing JavaScript code.\n- **Cons:**\n    \n    - Learning curve for developers unfamiliar with static typing.\n    - Compilation step introduced.\n- **Use Cases:**\n    \n    - Large-scale web applications.\n    - Projects requiring maintainability and scalability.\n- **Design Considerations:**\n    \n    - Define clear interfaces with TypeScript.\n    - Utilize type-checking for robust code.\n","x":-171,"y":285,"width":645,"height":935},
		{"id":"48cdd89ef631b103","type":"text","text":"**JavaScript**\n\n- **Pros:**\n    \n    - Versatile language for web development.\n    - Asynchronous programming with Promises.\n    - Large ecosystem (Node.js, npm).\n    - Dynamic typing.\n- **Cons:**\n    \n    - Single-threaded nature can lead to blocking operations.\n    - Callback hell in asynchronous code.\n- **Use Cases:**\n    \n    - Front-end web development.\n    - Server-side development (Node.js).\n    - Building cross-platform mobile apps (React Native).\n- **Design Considerations:**\n    \n    - Embrace asynchronous patterns.\n    - Leverage modern ECMAScript features.\n","x":-980,"y":285,"width":694,"height":880},
		{"id":"ff708179ef402b20","type":"text","text":"Updated: March 4th 2024\nRelated: [[Languages Overview -List View]], [[Languages VS Frameworks]], #development_speed #performance #quickread #compiled_languages #interpreted_languages\n #languages #quickread ","x":-1620,"y":-200,"width":476,"height":300}
	],
	"edges":[
		{"id":"637d7c6102e14280","fromNode":"2869f73d042eda3c","fromSide":"right","toNode":"e832d1efae759362","toSide":"left"},
		{"id":"a0838364d8ea0204","fromNode":"e832d1efae759362","fromSide":"right","toNode":"13a7ad36d91bd1ec","toSide":"left"},
		{"id":"77838978aad8b65f","fromNode":"13a7ad36d91bd1ec","fromSide":"bottom","toNode":"48cdd89ef631b103","toSide":"top"},
		{"id":"e75e3f2040dfa524","fromNode":"48cdd89ef631b103","fromSide":"right","toNode":"ea58f78beddb6bf5","toSide":"left"},
		{"id":"308078fdbd0273fb","fromNode":"ea58f78beddb6bf5","fromSide":"right","toNode":"7ced5e878274c243","toSide":"left"},
		{"id":"88d49f5a40b32eb9","fromNode":"a91f3a91fe5ca2c4","fromSide":"bottom","toNode":"2869f73d042eda3c","toSide":"left"},
		{"id":"fdd911b3ff8471c4","fromNode":"ff708179ef402b20","fromSide":"top","toNode":"a91f3a91fe5ca2c4","toSide":"bottom"}
	]
}