{
	"nodes":[
		{"id":"d152972b154f285c","type":"text","text":"**TypeScript**\n\n- **Pros:**\n    \n    - Static typing for enhanced code reliability.\n    - Improved tooling and autocompletion.\n    - Compatibility with existing JavaScript code.\n- **Cons:**\n    \n    - Learning curve for developers unfamiliar with static typing.\n    - Compilation step introduced.\n- **Use Cases:**\n    \n    - Large-scale web applications.\n    - Projects requiring maintainability and scalability.\n- **Design Considerations:**\n    \n    - Define clear interfaces with TypeScript.\n    - Utilize type-checking for robust code.\n","x":-191,"y":-242,"width":536,"height":510},
		{"id":"05e71b3c02446065","type":"text","text":"**Structured Query Language (SQL)**\n\n- **Pros:**\n    \n    - **Simplicity and Readability:**\n        \n        - Intuitive syntax for querying databases.\n        - Easy to read and write, facilitating quick data retrieval.\n    - **Data Integrity:**\n        \n        - Enforces data integrity through constraints (e.g., primary keys, foreign keys).\n        - Supports transactions for atomicity and consistency.\n    - **Standardization:**\n        \n        - Standard language for relational database management systems (RDBMS).\n        - Wide industry adoption and support.\n    - **Optimization:**\n        \n        - Optimized for set-based operations.\n        - Efficient for complex queries and aggregations.\n- **Cons:**\n    \n    - **Limited Procedural Capabilities:**\n        \n        - Primarily declarative, lacks extensive procedural programming features.\n        - May require coupling with a procedural language.\n    - **Scalability Challenges:**\n        \n        - Scaling vertically (upgrading hardware) may have limitations.\n        - Some NoSQL databases offer better horizontal scaling.\n    - **Vendor-Specific Syntax:**\n        \n        - SQL implementations vary between database vendors.\n        - Portability challenges when migrating between systems.\n- **Use Cases:**\n    \n    - **Data Retrieval:**\n        \n        - Querying and retrieving data from relational databases.\n        - Filtering, sorting, and aggregating data.\n    - **Data Modification:**\n        \n        - Inserting, updating, and deleting records.\n        - Maintaining data consistency and integrity.\n    - **Database Administration:**\n        \n        - Creating and modifying database schema.\n        - Managing user permissions and access.\n- **Design Considerations:**\n    \n    - **Normalization:**\n        \n        - Design databases in normalized forms to reduce redundancy.\n        - Optimize for data integrity.\n    - **Indexing:**\n        \n        - Strategically use indexes to enhance query performance.\n        - Consider trade-offs between read and write operations.\n    - **Security Measures:**\n        \n        - Implement proper access controls and permissions.\n        - Avoid SQL injection by using parameterized queries.\n    - **Performance Optimization:**\n        \n        - Optimize queries for performance.\n        - Monitor and analyze query execution plans.","x":380,"y":-242,"width":840,"height":1260},
		{"id":"cd9ce2a3f27425e4","type":"text","text":"**JavaScript**\n\n- **Pros:**\n    \n    - Versatile language for web development.\n    - Asynchronous programming with Promises.\n    - Large ecosystem (Node.js, npm).\n    - Dynamic typing.\n- **Cons:**\n    \n    - Single-threaded nature can lead to blocking operations.\n    - Callback hell in asynchronous code.\n- **Use Cases:**\n    \n    - Front-end web development.\n    - Server-side development (Node.js).\n    - Building cross-platform mobile apps (React Native).\n- **Design Considerations:**\n    \n    - Embrace asynchronous patterns.\n    - Leverage modern ECMAScript features.\n","x":-780,"y":40,"width":515,"height":600},
		{"id":"0cf73965f33fe9ca","type":"text","text":"**Python**\n\n- **Pros:**\n    \n    - Readability and simplicity.\n    - Extensive standard library.\n    - Broad community support.\n    - Versatility.\n- **Cons:**\n    \n    - Global Interpreter Lock (GIL) can limit concurrency.\n    - Slower execution speed compared to compiled languages.\n- **Use Cases:**\n    \n    - Web development (Django, Flask).\n    - Data science and machine learning.\n    - Automation and scripting.\n- **Design Considerations:**\n    \n    - Prioritize code readability.\n    - Leverage Python's rich ecosystem.","x":-660,"y":-1047,"width":640,"height":660},
		{"id":"956cd89ee1ef10a8","type":"text","text":"## Languages Overview\n","x":-2620,"y":-1200,"width":339,"height":50},
		{"id":"1326d2715a9bc77f","type":"text","text":"**C++**\n\n- **Variables & Types:**\n    \n    - Integers, floating-point numbers, characters, arrays, pointers, structures, classes\n\n```cpp\n#include <string>\nint myNum = 5; // Integer (whole number without decimals)\n\ndouble myFloatNum = 5.99; // Floating point number (with decimals) ex: 19.99 or -19.99\n\nchar myLetter = 'D'; // Character stores single characters 'a' 'B', surrounded by single quotes\n\nstd::string myText = \"Hello\"; // String (text) store text \"\" surrounded by double quotes\n\nbool myBoolean = true; // Boolean (true or false)\n```\n\n- Structure and class\n- `Person` is a structure with members `name` and `age`.\n- `Circle` is a class representing a circle with a private member `radius` and a method `getArea()` to calculate the area of the circle.\n- In the `main()` function, we create an instance of `Person` and `Circle` and demonstrate how to use them.\n```cpp\n#include <iostream>\n\n#include <string>\n\n// Structure\n\nstruct Person {\n\nstd::string name;\n\nint age;\n\n};\n\n  \n\n// Class\n\nclass Circle {\n\nprivate:\n\ndouble radius;\n\npublic:\n\nCircle(double r) : radius(r) {}\n\n  \n\ndouble getArea() {\n\nreturn 3.14 * radius * radius;\n\n}\n\n};\n\n  \n\nint main() {\n\n// Structure\n\nPerson person1;\n\nperson1.name = \"John\";\n\nperson1.age = 30;\n\nstd::cout << \"Person: \" << person1.name << \", Age: \" << person1.age << std::endl;\n\n  \n\n// Class\n\nCircle circle(5.0);\n\nstd::cout << \"Area of the circle: \" << circle.getArea() << std::endl;\n\n  \n\nreturn 0;\n\n}\n```","x":-2620,"y":-1080,"width":945,"height":2120},
		{"id":"54bf186d4f28d29f","type":"text","text":"**C#**\n\n- **Pros:**\n    \n    - Elegant syntax.\n","x":-1580,"y":-1100,"width":740,"height":1400}
	],
	"edges":[
		{"id":"5f54716d31b239d5","fromNode":"cd9ce2a3f27425e4","fromSide":"right","toNode":"d152972b154f285c","toSide":"left"},
		{"id":"cef2eacc1ee4cb86","fromNode":"0cf73965f33fe9ca","fromSide":"bottom","toNode":"cd9ce2a3f27425e4","toSide":"top"},
		{"id":"1deb56470c3e9b8f","fromNode":"d152972b154f285c","fromSide":"right","toNode":"05e71b3c02446065","toSide":"left"},
		{"id":"c4b4ff927f906157","fromNode":"1326d2715a9bc77f","fromSide":"right","toNode":"54bf186d4f28d29f","toSide":"left"},
		{"id":"a5c5c89692ad2383","fromNode":"956cd89ee1ef10a8","fromSide":"bottom","toNode":"1326d2715a9bc77f","toSide":"left"},
		{"id":"016fc6afc7fded46","fromNode":"54bf186d4f28d29f","fromSide":"right","toNode":"0cf73965f33fe9ca","toSide":"left"}
	]
}